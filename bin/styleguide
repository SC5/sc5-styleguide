#!/usr/bin/env node

var app,
  args = ['styleguide'],
  argv,
  chalk = require('chalk'),
  gulpProcess,
  path = require('path'),
  spawn = require('child_process').spawn,
  yargs = require('yargs');

argv = yargs
  .usage('This is how ' + chalk.cyan.bold('YOU') + ' can generate ' +
    chalk.cyan.bold('COOL') + ' styleguides')
  .example('$0 -s <src> -o <dest>', 'Generate a styleguide to dest using src')
  .example('$0 -s <src> -o <dest> --watch', 'Generate a styleguide to dest using src and run server watching changes')
  .demand('s', chalk.red('Please provide source path using -s <path>'))
  .demand('o', chalk.red('Please provide output path using -o <path>'))
  .describe('s', 'Source file(s)')
  .describe('o', 'Output directory')
  .describe('c', 'Path to config JSON file')
  .argv;

// Format args to be used with spawn
argv.s = path.resolve(argv.s);
argv.o = path.resolve(argv.o);
argv.c = argv.c ? path.resolve(argv.c) : undefined;
args = args.concat(['--source', argv.s]);
args = args.concat(['--output', argv.o]);
if (argv.c) {
  args = args.concat(['--config', argv.c]);
}

var spawnGulpProcess = function(taskName, options) {
  var gulpProcess = spawn(__dirname + '/../node_modules/gulp/bin/gulp.js', [taskName].concat(args));
  gulpProcess.stdout.on('data', function(data) {
    process.stdout.write(data);
  });
  gulpProcess.stderr.on('data', function(data) {
    process.stderr.write(data);
  });
  gulpProcess.on('close', function(code) {
    if (options && typeof options.onClose === 'function') {
      options.onClose(code);
    }
  });
}

spawnGulpProcess('styleguide', {
  onClose: function(code) {
    if (argv.watch) {
      spawnGulpProcess('production-watch', {
        onClose: function(code) {
          process.exit(code);
        }
      });
    } else if (argv.server) {
      spawnGulpProcess('serve', {
        onClose: function(code) {
          process.exit(code);
        }
      });
    } else {
      process.exit(code);
    }
  }
});
